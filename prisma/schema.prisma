datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        String     @default(cuid()) @id
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
  comments  Comment[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
}

model Comment {
  id        String     @default(cuid()) @id
  content   String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  author    User?   @relation(fields: [authorId], references: [id], name: "commentAuthor")
  authorId  String?
  identifiedUsers User[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
}

model User {
  id                     String                @default(cuid()) @id
  name                   String?               
  email                  String?               @unique
  emailVerified          String?               @default("default")
  image                  String? 
  createdAt              DateTime              @default(now()) @map(name: "created_at")
  updatedAt              DateTime              @updatedAt @map(name: "updated_at")
  info                   UserInfo?             @relation(fields: [infoId], references: [id])
  infoId                 String?
  posts                  Post[]
  comments               Comment[]             @relation(name: "commentAuthor")
  accounts               Account[]
  sessions               Session[]
  roles                  String                @default("unregistered")                            
  optionOverrides        OptionOverride[]
  identifiedInComments   Comment[]
  @@map(name: "users")
} 

model UserInfo {
  id            String    @default(cuid()) @id
  firstname     String    @default("")
  lastname      String    @default("")
  phone         String    @default("")
  users         User[]      
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
}

model OptionOverride {
  id           String @default(cuid()) @id
  code         String @unique
  value        String
  users        User[]
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @updatedAt @map(name: "updated_at")
  createdByRequest    String  @default("default:{}") @map(name: "createdByRequest")
  updatedByRequest    String  @map(name: "updatedByRequest")
}

model Option {
  id           String @default(cuid()) @id
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

